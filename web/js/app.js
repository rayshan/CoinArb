// Generated by CoffeeScript 1.6.3
(function() {
  angular.module('app', ['ngResource', 'ngAnimate', 'btford.socket-io', 'poller']);

  angular.module('app').run(function(tickerSvc) {});

  angular.module('app').factory('exchangeSvc', function() {
    var data;
    data = {
      mtgox: {
        id: 'mtgox',
        displayNameEng: 'Mt. Gox',
        defaultCurrency: 'USD',
        website: 'https://mtgox.com/',
        api: {
          type: 'ws',
          uri: 'https://data.mtgox.com/api/2/BTCUSD/money/ticker_fast'
        },
        fetched: {
          current: {
            bid: null,
            ask: null,
            last: null,
            updateTime: null,
            error: null
          },
          previous: {
            bid: null,
            ask: null,
            last: null,
            updateTime: null,
            error: null
          }
        }
      },
      btcchina: {
        id: 'btcchina',
        displayNameEng: 'BTC China',
        displayNameLocal: '比特币中国',
        defaultCurrency: 'CNY',
        website: 'https://btcchina.com',
        api: {
          type: 'REST',
          uri: 'https://data.btcchina.com/data/ticker',
          rateLimit: 1000 * 5
        },
        fetched: {
          current: {
            bid: null,
            ask: null,
            last: null,
            updateTime: null,
            error: null
          },
          previous: {
            bid: null,
            ask: null,
            last: null,
            updateTime: null,
            error: null
          }
        }
      },
      localbitcoins: {
        id: 'localbitcoins',
        displayNameEng: 'LocalBitcoins.com',
        defaultCurrency: 'USD',
        website: 'https://localbitcoins.com',
        api: {
          type: 'REST',
          uri: 'https://api.bitcoinaverage.com/exchanges/USD',
          rateLimit: 1001 * 60
        },
        fetched: {
          current: {
            bid: null,
            ask: null,
            last: null,
            updateTime: null,
            error: null
          },
          previous: {
            bid: null,
            ask: null,
            last: null,
            updateTime: null,
            error: null
          }
        }
      }
    };
    return {
      data: data
    };
  });

  angular.module('app').factory('notificationSvc', function() {
    return {
      enabled: false,
      create: function(data) {
        var n;
        if (Notification.permission !== 'granted') {
          Notification.requestPermission();
        }
        n = new Notification('yo', {
          body: data
        });
      }
    };
  });

  angular.module('app').factory('checkAndCopySvc', function($rootScope, exchangeSvc, notificationSvc) {
    return {
      process: function(id, current) {
        var changed, data, now;
        now = moment().second();
        data = exchangeSvc.data[id].fetched;
        changed = current.bid !== data.current.bid || current.ask !== data.current.ask || current.last !== data.current.last;
        if (changed) {
          current.updateTime = now;
          angular.copy(data.current, data.previous);
          angular.copy(current, data.current);
          if (notificationSvc.enabled) {
            notificationSvc.create(exchangeSvc.data[id].fetched.current.last);
          }
          $rootScope.$broadcast("tickerUpdate");
        }
      }
    };
  });

  angular.module('app').factory('tickerSvc', function($resource, $filter, exchangeSvc, poller, checkAndCopySvc) {
    var USDCNY, callback, data, myResource, name, pollers, _i, _len, _ref;
    USDCNY = 6.05;
    pollers = [];
    callback = {
      btcchina: function(res) {
        var current, id;
        id = "btcchina";
        current = {
          bid: $filter('round')(res.ticker.buy / USDCNY, 2),
          ask: $filter('round')(res.ticker.sell / USDCNY, 2),
          last: $filter('round')(res.ticker.last / USDCNY, 2),
          updateTime: null,
          error: null
        };
        checkAndCopySvc.process(id, current);
      },
      localbitcoins: function(res) {
        var current, id;
        id = "localbitcoins";
        current = {
          bid: res[id].rates.bid,
          ask: res[id].rates.ask,
          last: res[id].rates.last,
          updateTime: null,
          error: null
        };
        checkAndCopySvc.process(id, current);
      }
    };
    _ref = exchangeSvc.data;
    for (name in _ref) {
      data = _ref[name];
      if (data.api.type === "REST") {
        myResource = $resource(data.api.uri);
        pollers.push({
          id: name,
          item: poller.get(myResource, {
            action: 'get',
            delay: data.api.rateLimit
          })
        });
      }
    }
    for (_i = 0, _len = pollers.length; _i < _len; _i++) {
      poller = pollers[_i];
      poller.item.promise.then(null, null, callback[poller.id]);
    }
  });

  angular.module('app').factory('socket', function(socketFactory) {
    return socketFactory({
      ioSocket: io.connect('http://socketio.mtgox.com:80/mtgox?Currency=USD')
    });
  });

  angular.module('app').controller('AppCtrl', function($scope, socket, exchangeSvc) {
    var channel, obj, _ref,
      _this = this;
    this.data = exchangeSvc.data;
    this.cols = 12 / Object.keys(this.data).length;
    console.log(this.data);
    $scope.$on("tickerUpdate", function() {
      return _this.data = exchangeSvc.data;
    });
    this.unsubscribe = {
      depthBTCUSD: {
        op: 'unsubscribe',
        channel: '24e67e0d-1cad-4cc0-9e7a-f8523ef460fe'
      },
      tradeBTC: {
        op: 'unsubscribe',
        channel: 'dbf1dee9-4f2e-4a08-8cb7-748919a71b21'
      }
    };
    socket.on('connect', function() {
      console.log("Connected.");
    });
    _ref = this.unsubscribe;
    for (channel in _ref) {
      obj = _ref[channel];
      socket.send(JSON.stringify(obj));
    }
    socket.on('message', function(res) {
      try {
        _this.price = res.ticker.last.display_short;
      } catch (_error) {}
    });
  });

}).call(this);

/*
//@ sourceMappingURL=app.map
*/
